{"version":3,"sources":["requests/index.js","App.js","serviceWorker.js","index.js"],"names":["host","sendFile","data","a","formData","FormData","Object","entries","forEach","key","value","append","axios","post","response","getFields","get","qs","stringify","App","React","useState","file","timeFrom","timeTo","currencyCode","status","values","setValues","onChange","e","type","target","files","Math","round","Date","getTime","mt","display","mb","alignItems","Input","accept","ml","onClick","placeholder","justifyContent","mr","fontWeight","style","maxWidth","width","Table","Boolean","window","location","hostname","match","customTheme","theme","breakpoints","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9551b7c7.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport qs from 'querystring'\r\nconst host = 'http://194.44.177.148:49008'\r\n\r\nexport const sendFile = async (data) => {\r\n  try {\r\n    const formData = new FormData()\r\n    Object.entries(data).forEach(([key, value]) => {\r\n      formData.append(key, value)\r\n    })\r\n    const response = await axios.post(`${host}/api/transaction`, formData)\r\n\r\n    return response.data\r\n  } catch (error) {\r\n    throw error\r\n  }\r\n}\r\n\r\nexport const getFields = async (data) => {\r\n  try {\r\n    const response = await axios.get(`${host}/api/transaction?${qs.stringify(data)}`)\r\n\r\n    return response.data\r\n  } catch (error) {\r\n    throw error\r\n  }\r\n}\r\n","import React from 'react'\nimport { Text, Box, Button, Container, Select } from '@chakra-ui/core'\nimport { Table, Input } from 'reactstrap'\nimport 'bootstrap/dist/css/bootstrap.css'\nimport { sendFile, getFields } from './requests'\n\nimport './App.css'\n\nfunction App() {\n  const [values, setValues] = React.useState({\n    file: {},\n    timeFrom: '',\n    timeTo: '',\n    currencyCode: '',\n    status: '',\n  })\n  const onChange = (e, type) => {\n    if (type === 'file') {\n      setValues({\n        ...values,\n        file: e.target.files[0],\n      })\n    } else {\n      if (type === 'timeTo' || type === 'timeFrom') {\n        setValues({\n          ...values,\n          [type]: Math.round(new Date(e.target.value).getTime() / 1000),\n        })\n      } else {\n        setValues({\n          ...values,\n          [type]: e.target.value,\n        })\n      }\n    }\n  }\n\n  const post = async () => {\n    const res = await sendFile({ file: values.file })\n  }\n\n  const get = async () => {\n    const res = await getFields(values)\n  }\n\n  return (\n    <Container mt=\"30px\">\n      <Box display=\"flex\" mb=\"10px\" alignItems=\"center\">\n        <Input type=\"file\" accept=\".xml,.csv\" onChange={(e) => onChange(e, 'file')} />\n        <Button ml=\"10px\" onClick={post}>\n          import\n        </Button>\n      </Box>\n      <Box mb=\"10px\">\n        <Input type=\"text\" placeholder=\"Код валюты\" onChange={(e) => onChange(e, 'currencyCode')} />\n      </Box>\n      <Box mb=\"10px\" display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n        <Text mr=\"5px\" fontWeight=\"bold\">\n          Статус\n        </Text>\n        <Select onChange={(e) => onChange(e, 'status')}>\n          <option value=\"\">Не выбрано</option>\n          <option value=\"1\">Approved</option>\n          <option value=\"2\">Failed</option>\n          <option value=\"3\">Rejected</option>\n          <option value=\"4\">Finished</option>\n          <option value=\"5\">Done</option>\n        </Select>\n      </Box>\n      <Box mb=\"10px\" display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n        <Text mr=\"5px\" fontWeight=\"bold\">\n          from\n        </Text>\n        <Input type=\"date\" onChange={(e) => onChange(e, 'timeFrom')} style={{ maxWidth: '300px' }} />\n      </Box>\n      <Box mb=\"10px\" display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n        <Text mr=\"5px\" fontWeight=\"bold\">\n          to\n        </Text>\n        <Input type=\"date\" onChange={(e) => onChange(e, 'timeTo')} style={{ maxWidth: '300px' }} />\n      </Box>\n      <Box mb=\"10px\">\n        <Button onClick={get} width=\"100%\">\n          Get\n        </Button>\n      </Box>\n      <Table>\n        <thead>\n          <tr>\n            <th>Transaction</th>\n            <th>Payment</th>\n            <th>Status</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>1</td>\n            <td>2</td>\n            <td>3</td>\n          </tr>\n        </tbody>\n      </Table>\n    </Container>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { ChakraProvider, CSSReset } from '@chakra-ui/core'\nimport theme from '@chakra-ui/theme'\n\nconst customTheme = {\n  ...theme,\n  breakpoints: ['768px', '991px', '1440px', '1920px'],\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider theme={customTheme}>\n      <CSSReset />\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}